var _abadi199$elm_input_extra$Input_Text$isValid = F2(
	function (value, options) {
		var exceedMaxLength = A2(
			_elm_lang$core$Maybe$withDefault,
			false,
			A2(
				_elm_lang$core$Maybe$map,
				_elm_lang$core$Basics$not,
				A2(
					_elm_lang$core$Maybe$map,
					F2(
						function (x, y) {
							return _elm_lang$core$Native_Utils.cmp(x, y) < 1;
						})(
						_elm_lang$core$String$length(value)),
					options.maxLength)));
		return _elm_lang$core$Basics$not(exceedMaxLength);
	});
var _abadi199$elm_input_extra$Input_Text$onKeyDown = F3(
	function (options, model, tagger) {
		var filterKey = function (event) {
			var newValue = A2(
				_elm_lang$core$Basics_ops['++'],
				model.value,
				_elm_lang$core$String$fromChar(
					_elm_lang$core$Char$fromCode(event.keyCode)));
			return (event.ctrlKey || event.altKey) ? _elm_lang$core$Result$Err('modifier key is pressed') : (A2(
				_elm_lang$core$List$any,
				F2(
					function (x, y) {
						return _elm_lang$core$Native_Utils.eq(x, y);
					})(event.keyCode),
				_abadi199$elm_input_extra$Input_KeyCode$allowedKeyCodes) ? _elm_lang$core$Result$Err('not arrow') : (A2(_abadi199$elm_input_extra$Input_Text$isValid, newValue, options) ? _elm_lang$core$Result$Err('valid') : _elm_lang$core$Result$Ok(event.keyCode)));
		};
		var decoder = A2(
			_elm_lang$core$Json_Decode$map,
			tagger,
			A2(_elm_lang$core$Json_Decode$customDecoder, _abadi199$elm_input_extra$Input_Decoder$eventDecoder, filterKey));
		var eventOptions = {stopPropagation: false, preventDefault: true};
		return A3(_elm_lang$html$Html_Events$onWithOptions, 'keydown', eventOptions, decoder);
	});
var _abadi199$elm_input_extra$Input_Text$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'NoOp':
				return model;
			case 'KeyDown':
				return model;
			case 'OnInput':
				var _p1 = _p0._1;
				return A2(_abadi199$elm_input_extra$Input_Text$isValid, _p1, _p0._0) ? _elm_lang$core$Native_Utils.update(
					model,
					{value: _p1}) : model;
			default:
				return _elm_lang$core$Native_Utils.update(
					model,
					{hasFocus: _p0._0});
		}
	});
var _abadi199$elm_input_extra$Input_Text$init = {value: '', hasFocus: false};
var _abadi199$elm_input_extra$Input_Text$defaultOptions = function (id) {
	return {id: id, maxLength: _elm_lang$core$Maybe$Nothing};
};
var _abadi199$elm_input_extra$Input_Text$Options = F2(
	function (a, b) {
		return {id: a, maxLength: b};
	});
var _abadi199$elm_input_extra$Input_Text$Model = F2(
	function (a, b) {
		return {value: a, hasFocus: b};
	});
var _abadi199$elm_input_extra$Input_Text$OnFocus = function (a) {
	return {ctor: 'OnFocus', _0: a};
};
var _abadi199$elm_input_extra$Input_Text$OnInput = F2(
	function (a, b) {
		return {ctor: 'OnInput', _0: a, _1: b};
	});
var _abadi199$elm_input_extra$Input_Text$KeyDown = function (a) {
	return {ctor: 'KeyDown', _0: a};
};
var _abadi199$elm_input_extra$Input_Text$input = F3(
	function (options, attributes, model) {
		return A2(
			_elm_lang$html$Html$input,
			A2(
				_elm_lang$core$List$append,
				attributes,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$id(options.id),
						_elm_lang$html$Html_Attributes$value(model.value),
						A3(_abadi199$elm_input_extra$Input_Text$onKeyDown, options, model, _abadi199$elm_input_extra$Input_Text$KeyDown),
						_elm_lang$html$Html_Events$onInput(
						_abadi199$elm_input_extra$Input_Text$OnInput(options)),
						_elm_lang$html$Html_Events$onFocus(
						_abadi199$elm_input_extra$Input_Text$OnFocus(true)),
						_elm_lang$html$Html_Events$onBlur(
						_abadi199$elm_input_extra$Input_Text$OnFocus(false)),
						_elm_lang$html$Html_Attributes$type$('text')
					])),
			_elm_lang$core$Native_List.fromArray(
				[]));
	});
var _abadi199$elm_input_extra$Input_Text$NoOp = {ctor: 'NoOp'};
